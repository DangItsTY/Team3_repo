#include<iostream>
#include<vector>
#include "HuffmanTreeNode.h"
#include "HuffmanTree.h"
#include<string>
#include "Heap.h"
#include "HeapItem.h"
#include <stdio.h>
using namespace std;
int distinctChars (int f[]){
  int numchars = 0;
  for(int x = 32; x<127;x++){
    if(f[x]>0)
      numchars++;
  }
  return numchars;
}

int main (int argc, char **argv) {

    // verify the correct number of parameters
    if ( argc != 2 ) {
      cout << "Must supply the input file name as the one and only parameter" << endl;
	return 0;
    }

    FILE *fp = fopen(argv[1], "r");


    if ( fp == NULL ) {
        cout << "File '" << argv[1] << "' does not exist!" << endl;
	return 0;
    }
    string a ="~";
    HuffmanTree *thetree = new HuffmanTree();
  char g;
    int freq [127];
    for(int init = 0; init<127; init++)
      freq[init] = 0;
    while ( (g = fgetc(fp)) != EOF ){
      int character = int(g);
      freq[character]++;
      cout << g;

    }
    int numelements = distinctChars(freq);
    vector<string> output;
    Heap *huffmanHeap = new Heap (numelements);
    for(int x = 32; x<127;x++){
      if(freq[x]>0)
	huffmanHeap->Enqueue(freq[x],x);
	}
    vector<HuffmanTree> forest;
    for(int y = 0;y<numelements;y++){
      HeapItem *temp = huffmanHeap->Dequeue();
      int t1 = temp->getKey();
      int t2 = temp->getData();
      forest[y].insert(t1,t2);
    }
    
    cout << "----------------------------------------" << endl;
    rewind(fp);
    /*
    while ( (g = fgetc(fp)) != EOF )
    cout << g;*/

      fclose(fp);
}
