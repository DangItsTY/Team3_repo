C00D 00 jmp Skip variables
0000 01 dw int i
0000 02 dw int j
0000 03 dw int MAX
0000 04 dw int tempj
0000 05 dw int tempj1
0001 06 one element
0005 07 5 element
0000 08 zero element
0040 09 dw base address of array int [] a
3000 0A creating special load command
4000 0B creating a special store command for swapping
0000 0C extra variable
3007 0D load Load five element
4003 0E store Store 5 into MAX
6006 0F sub Subtract 1 from MAX
3003 10 load Load int MAX //Start of Loop
6001 11 sub Subtract i from MAX (i<MAX)
D03E 12 jmpe Jump to end of loop if i=5
3003 13 load Load MAX 
6006 14 sub Subtract 1 from MAX
4002 15 store Store max into j 
3002 16 load Load J Start of INNER LOOP
6001 17 sub Subtract i from j (j>i)
D03A 18 jmpe Jump to end of INNER LOOP
300A 19 load start of load command
5009 1A add Add base address of array
5002 1B add Add int j to find correct element
401D 1C store Store new load command into next line
B000 1D NOP new load command
4004 1E store Store this into a temp variable
300A 1F load Load new load command again
5009 20 add Add base address
5002 21 add Add J 
6006 22 sub Subtract 1 to find element j-1
4024 23 store Store in the next command
B000 24 NOP new load command
4005 25 store Store this in tempj1
3005 26 load Load tempj1 START OF IF STATEMENT
6004 27 sub Subtract tempj (A[j]<A[j-1]
E036 28 jmpl jump if less than 0 IF STATEMENT MOVEMENT
300B 29 load Load store command 
5009 2A add Add array base address
5002 2B add Add int J
402E 2C store Store this as a future command
3005 2D load Load A[j-1]
B000 2E NOP special store command
300B 2F load Load store command
5009 30 add Add array base address
5002 31 add Add j
6006 32 sub subtract 1 for j-1
4035 33 store Store as a future command
3004 34 load Load A[j]
B000 35 NOP special store command to complete swap
3002 36 load Load j to increment loop
6006 37 sub Subtract 1 for j--
4002 38 store Store back into j
C016 39 jmp Jump back to start of loop END OF INNER LOOP
3001 3A load Load int i
5006 3B add Increment i (i++)
4001 3C store Store this back into i
C010 3D jmp Jump to beginning of loop END OF OUTER LOOP
0000 3E Halt end of program